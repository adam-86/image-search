{"version":3,"sources":["components/Header.js","components/Footer.js","components/galleryComponents/Gallery.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Footer","Gallery","gallery","_this","this","gifs","props","map","gif","concat","listStyle","key","id","target","rel","href","url","style","backgroundImage","images","original","Component","SearchBar","state","searchKeyword","pageOffset","resultsTotal","pageNumber","searchDisplay","onChange","e","setState","value","checkKey","search","_this$state","axios","get","then","response","data","pagination","total_count","console","log","catch","err","alert","setListStyle","layoutButtons","document","querySelectorAll","Array","from","forEach","layoutBtn","name","nextPage","scrollToTop","previousPage","ReactDom","findDOMNode","Object","assertThisInitialized","scrollIntoView","behavior","pageNav","onClick","type","onKeyPress","required","length","Gallery_Gallery","App","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","changeTheme","theme","components_Header","SearchBar_SearchBar","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21a25243.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"header-container\">\n        <div>\n          <span>\n            <strong>Gif</strong> Search\n          </span>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => {\n  return <footer />;\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\n\nexport default class Gallery extends Component {\n  render() {\n    let gallery;\n    const { gifs } = this.props;\n    /*\n    if props contain gifs, create image block\n    inside of gallery container for each one.\n    */\n    if (gifs) {\n      gallery = (\n        <div className=\"image-container\">\n          {gifs.map(gif => (\n            <div\n              className={`image-block transition ${this.props.listStyle}`}\n              key={gif.id}\n            >\n              <a\n                className=\"image-link\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={gif.url}\n              >\n                <div\n                  className=\"image\"\n                  style={{ backgroundImage: `url(${gif.images.original.url})` }}\n                />\n              </a>\n            </div>\n          ))}\n        </div>\n      );\n    } else {\n      gallery = \"\";\n    }\n    return <div>{gallery}</div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport ReactDom from \"react-dom\";\nimport axios from \"axios\";\nimport Gallery from \"./galleryComponents//Gallery.js\";\n\nexport default class SearchBar extends Component {\n  state = {\n    url: \"https://api.giphy.com/v1/gifs/search?api_key=\",\n    key: \"iNACUQW9yFvcDyaPwxNVy45mKeNNx9XP&\",\n    searchKeyword: \"\",\n    pageOffset: 0,\n    resultsTotal: \"\",\n    gifs: {},\n    listStyle: \"smallThumbs\",\n    pageNumber: null,\n    searchDisplay: \"\"\n  };\n\n  // sets search value\n  onChange = e => {\n    this.setState({ searchKeyword: e.target.value });\n  };\n\n  // checks if user hits enter key and calls search\n  checkKey = e => {\n    if (e.key === \"Enter\") {\n      this.search();\n    }\n  };\n\n  search = () => {\n    // if query text exists, send http request\n    if (this.state.searchKeyword) {\n      // set search term for display up search bar\n      this.setState({ searchDisplay: this.state.searchKeyword });\n      const { url, key, searchKeyword, pageOffset } = this.state;\n      axios\n        .get(\n          `${url}${key}&q=${searchKeyword}&limit=0&offset=${pageOffset}&rating=R&lang=en`\n        )\n        .then(response => {\n          this.setState({\n            gifs: response.data.data,\n            resultsTotal: response.data.pagination.total_count\n          });\n\n          //if search has not yet ran, set initial page offset to 25\n          if (\n            this.state.pageOffset === 0\n              ? this.setState({ pageOffset: 25, pageNumber: 1 })\n              : null\n          )\n            console.log(this.state.resultsTotal);\n        })\n        .catch(err => console.log(err));\n\n      // clear text input after search\n      this.setState.searchKeyword = \"\";\n    } else {\n      alert(\"check your input\");\n      return;\n    }\n  };\n\n  // set gallery grid size\n  setListStyle = e => {\n    const layoutButtons = document.querySelectorAll(\".layout-buttons\");\n\n    //Reset class list on each button\n    Array.from(layoutButtons).forEach(layoutBtn => {\n      layoutBtn.className = \"layout-buttons\";\n    });\n\n    //set state to the name of the button clicked\n    this.setState({ listStyle: e.target.name });\n\n    // set button clicked to active\n    e.target.className = \"layout-buttons active\";\n  };\n\n  // gets the next 25 results\n  nextPage = () => {\n    if (this.state.searchDisplay) {\n      this.setState({\n        pageOffset: this.state.pageOffset + 25,\n        pageNumber: this.state.pageNumber + 1\n      });\n      this.search();\n      this.scrollToTop();\n    }\n  };\n\n  // go back to previous 25 results\n  previousPage = () => {\n    if (this.state.searchDisplay) {\n      if (this.state.pageNumber > 1) {\n        this.setState({\n          pageOffset: this.state.pageOffset - 25,\n          pageNumber: this.state.pageNumber - 1\n        });\n        this.search();\n        this.scrollToTop();\n      }\n    }\n  };\n  scrollToTop = () => {\n    ReactDom.findDOMNode(this).scrollIntoView({ behavior: \"smooth\" });\n  };\n\n  render() {\n    /*\n    saved page nav buttons to constant so I could easily\n    display them on the above and below the search results\n    */\n    const pageNav = (\n      <div className={\"nav-button-container\"}>\n        <button className={\"nav-buttons\"} onClick={this.previousPage}>\n          <i className=\"fas fa-angle-double-left\" />\n        </button>\n        <span className=\"page-number\"> Page: {this.state.pageNumber} </span>\n        <button className={\"nav-buttons\"} onClick={this.nextPage}>\n          <i className=\"fas fa-angle-double-right\" />\n        </button>\n      </div>\n    );\n\n    return (\n      <div>\n        <div className=\"search-container\">\n          <div className=\"search-row\">\n            <div className=\"search-bar-container\">\n              <input\n                type=\"text\"\n                id=\"search-bar\"\n                value={this.state.searchKeyword}\n                onChange={this.onChange}\n                onKeyPress={this.checkKey}\n                required\n              />\n              <button className=\"search-button\" onClick={this.search}>\n                <i className=\"fas fa-search\" />\n              </button>\n            </div>\n            <button\n              className=\"layout-buttons active\"\n              name=\"smallThumbs\"\n              onClick={this.setListStyle}\n            />\n            <button\n              className=\"layout-buttons\"\n              name=\"mediumThumbs\"\n              onClick={this.setListStyle}\n            />\n            <button\n              className=\"layout-buttons\"\n              name=\"largeThumbs\"\n              onClick={this.setListStyle}\n            />\n          </div>\n          <span className=\"display-count\">\n            {/* only display result count if search returned results*/}\n            {this.state.resultsTotal > 0\n              ? `Showing  ${this.state.pageOffset}\n                out of ${this.state.resultsTotal} results for \"${\n                  this.state.searchDisplay\n                }\"`\n              : null}\n          </span>\n        </div>\n        {/* If state contains gifs, render gallery */}\n        {this.state.gifs.length > 0 ? (\n          <div>\n            {pageNav}\n            <Gallery\n              gifs={this.state.gifs}\n              listStyle={this.state.listStyle}\n              pageOffset={this.state.pageOffset}\n            />\n            {pageNav}\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport Header from \"./components/Header.js\";\nimport Footer from \"./components/Footer.js\";\nimport SearchBar from \"./components/SearchBar.js\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      theme: \"light\"\n    };\n  }\n\n  changeTheme = () => {\n    console.log(this.state.theme);\n    if (this.state.theme === \"light\") {\n      this.setState({ theme: \"dark\" });\n    } else {\n      this.setState({ theme: \"light\" });\n    }\n  };\n\n  render() {\n    return (\n      <div className={`App ${this.state.theme}`}>\n        <button\n          className={`${this.state.theme}Theme`}\n          onClick={this.changeTheme}\n        />\n        <Header />\n        <SearchBar />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}