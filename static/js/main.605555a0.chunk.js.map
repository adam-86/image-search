{"version":3,"sources":["components/Header.js","components/Footer.js","components/galleryComponents/Gallery.js","components/SearchBar.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","Footer","Gallery","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","listStyle","setState","gallery","_this2","gifs","map","gif","concat","key","id","target","rel","href","url","style","backgroundImage","images","original","Component","SearchBar","queryText","pageOffset","resultsTotal","pageNumber","searchDisplay","onChange","e","value","checkKey","search","_this$state","axios","get","then","response","data","pagination","total_count","console","log","catch","err","alert","setListStyle","layoutButtons","document","querySelectorAll","Array","from","forEach","layoutBtn","name","nextPage","previousPage","type","onKeyPress","required","onClick","length","Gallery_Gallery","App","components_Header","SearchBar_SearchBar","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.605555a0.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header>\n      <div className=\"header-container\">\n        <div>\n          <span>\n            <strong>Gif</strong> Search\n          </span>\n        </div>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst Footer = () => {\n  return <footer />;\n};\n\nexport default Footer;\n","import React, { Component } from \"react\";\n\nexport default class Gallery extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      listStyle: this.props.listStyle\n    };\n  }\n\n  // Update state from props when grid size buttons are pressed\n  componentDidRecieveProps() {\n    this.setState({\n      listStyle: this.props.listStyle\n    });\n  }\n\n  render() {\n    let gallery;\n    const { gifs } = this.props;\n    // if props contain gifs, create image block for each one.\n    if (gifs) {\n      gallery = (\n        <div className=\"image-container\">\n          {gifs.map(gif => (\n            <div\n              className={`image-block transition ${this.props.listStyle}`}\n              key={gif.id}\n            >\n              <a\n                className=\"image-link\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={gif.url}\n              >\n                <div\n                  className=\"image\"\n                  style={{ backgroundImage: `url(${gif.images.original.url})` }}\n                />\n              </a>\n            </div>\n          ))}\n        </div>\n      );\n    } else {\n      gallery = \"\";\n    }\n    return <div>{gallery}</div>;\n  }\n}\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport Gallery from \"./galleryComponents//Gallery.js\";\n\nexport default class SearchBar extends Component {\n  state = {\n    url: \"https://api.giphy.com/v1/gifs/search?api_key=\",\n    key: \"iNACUQW9yFvcDyaPwxNVy45mKeNNx9XP&\",\n    queryText: \"\",\n    pageOffset: 0,\n    resultsTotal: \"\",\n    gifs: {},\n    listStyle: \"smallThumbs\",\n    pageNumber: null,\n    searchDisplay: \"\"\n  };\n\n  // sets search value\n  onChange = e => {\n    this.setState({ queryText: e.target.value });\n  };\n\n  // checks if user hits enter key and calls search\n  checkKey = e => {\n    if (e.key === \"Enter\") {\n      this.search();\n    }\n  };\n\n  search = () => {\n    // if query text exists, send http request\n    if (this.state.queryText) {\n      // set search term for display up search bar\n      this.setState({ searchDisplay: this.state.queryText });\n      const { url, key, queryText, pageOffset } = this.state;\n      axios\n        .get(\n          `${url}${key}&q=${queryText}&limit=0&offset=${pageOffset}&rating=R&lang=en`\n        )\n        .then(response => {\n          this.setState({\n            gifs: response.data.data,\n            resultsTotal: response.data.pagination.total_count\n          });\n\n          //if search has not yet ran, set initial page offset to 25\n          if (\n            this.state.pageOffset === 0\n              ? this.setState({ pageOffset: 25, pageNumber: 1 })\n              : null\n          )\n            console.log(this.state.resultsTotal);\n        })\n        .catch(err => console.log(err));\n      // clear query text input after search\n      this.setState.queryText = \"\";\n    } else {\n      alert(\"You didn't type anything? ノ( º – ºノ) \");\n      return;\n    }\n  };\n\n  // sets image grid size\n  setListStyle = e => {\n    const layoutButtons = document.querySelectorAll(\".layout-buttons\");\n\n    Array.from(layoutButtons).forEach(layoutBtn => {\n      layoutBtn.className = \"layout-buttons\";\n    });\n\n    this.setState({ listStyle: e.target.name });\n    e.target.className = \"layout-buttons active\";\n  };\n\n  // gets the next 25 results\n  nextPage = () => {\n    if (this.state.searchDisplay) {\n      this.setState({\n        pageOffset: this.state.pageOffset + 25,\n        pageNumber: this.state.pageNumber + 1\n      });\n      this.search();\n    }\n  };\n\n  // go back to previous 25 results\n  previousPage = () => {\n    if (this.state.searchDisplay) {\n      if (this.state.pageNumber > 1) {\n        this.setState({\n          pageOffset: this.state.pageOffset - 25,\n          pageNumber: this.state.pageNumber - 1\n        });\n        this.search();\n      }\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div className=\"search-container\">\n          <div className=\"search-row\">\n            <div className=\"search-bar-container\">\n              <input\n                type=\"text\"\n                id=\"search-bar\"\n                value={this.state.queryText}\n                onChange={this.onChange}\n                onKeyPress={this.checkKey}\n                required\n              />\n              <button className=\"search-button\" onClick={this.search}>\n                <i className=\"fas fa-search\" />\n              </button>\n            </div>\n\n            <button\n              className=\"layout-buttons active\"\n              name=\"smallThumbs\"\n              onClick={this.setListStyle}\n            />\n            <button\n              className=\"layout-buttons\"\n              name=\"largeThumbs\"\n              onClick={this.setListStyle}\n            />\n          </div>\n          <span className=\"display-count\">\n            {/* only display result count if search returned results*/}\n            {this.state.resultsTotal > 0\n              ? `Showing  ${this.state.pageOffset}\n                out of ${this.state.resultsTotal} results for \"${\n                  this.state.searchDisplay\n                }\"`\n              : null}\n          </span>\n\n          <div className={\"nav-button-container\"}>\n            <button className={\"nav-buttons\"} onClick={this.previousPage}>\n              <i className=\"fas fa-angle-double-left\" />\n            </button>\n            <span className=\"page-number\"> Page: {this.state.pageNumber} </span>\n            <button className={\"nav-buttons\"} onClick={this.nextPage}>\n              <i className=\"fas fa-angle-double-right\" />\n            </button>\n          </div>\n        </div>\n        {/* If state contains gifs, render gallery component */}\n        {this.state.gifs.length > 0 ? (\n          <Gallery\n            gifs={this.state.gifs}\n            listStyle={this.state.listStyle}\n            pageOffset={this.state.pageOffset}\n          />\n        ) : null}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport \"./App.css\";\nimport Header from \"./components/Header.js\";\nimport Footer from \"./components/Footer.js\";\nimport SearchBar from \"./components/SearchBar.js\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <SearchBar />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}